<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Interactive Grid Map with Shared Markers</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    #map { height: 100vh; margin: 0; padding: 0; }
    .sidebar {
      position: absolute;
      top: 60px;
      right: 10px;
      background: white;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 0 5px rgba(0,0,0,0.3);
      z-index: 1000;
      font-size: 14px;
    }
    .sidebar h3 {
      margin-top: 0;
      font-size: 16px;
    }
    .grid-label {
      background: none;
      color: black;
      padding: 2px 4px;
      font-size: 14px;
      font-weight: bold;
    }
    .grid-number {
      background: none;
      color: black;
      font-size: 12px;
      font-weight: bold;
    }
    .reset-button {
      position: absolute;
      top: 10px;
      right: 10px;
      background: white;
      padding: 5px 10px;
      border-radius: 4px;
      box-shadow: 0 0 5px rgba(0,0,0,0.3);
      cursor: pointer;
      z-index: 1000;
    }
    .logo {
      position: absolute;
      bottom: 10px;
      right: 10px;
      background: gold;
      color: white;
      font-size: 24px;
      font-weight: bold;
      padding: 10px 15px;
      border-radius: 5px;
      z-index: 1000;
    }
  </style>
</head>
<body>
  <div id="map"></div>
  <div class="reset-button" onclick="resetZoom()">Reset Zoom</div>
  <div class="sidebar">
    <h3>Toggle Markers</h3>
    <label><input type="checkbox" class="toggle-marker" data-type="fish" checked> Fish</label><br>
    <label><input type="checkbox" class="toggle-marker" data-type="quest" checked> Quests</label><br>
    <label><input type="checkbox" class="toggle-marker" data-type="herbs" checked> Herbs</label><br>
    <label><input type="checkbox" class="toggle-marker" data-type="mining" checked> Mining</label><br>
    <label><input type="checkbox" class="toggle-marker" data-type="trees" checked> Trees</label><br>
    <label><input type="checkbox" class="toggle-marker" data-type="dynamic" checked> Dynamic Events</label>
  </div>
  <div class="logo">FAM GUILD</div>
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js';
    import { getAnalytics } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-analytics.js';
    import {
      getFirestore, collection, query,
      orderBy, getDocs, addDoc, deleteDoc, doc,
      serverTimestamp
    } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js';

    const firebaseConfig = {
      apiKey: "AIzaSyBhJyc3a-i6um7te-W2Z-m-8J0u0CMerJY",
      authDomain: "map-data-base-620d3.firebaseapp.com",
      projectId: "map-data-base-620d3",
      storageBucket: "map-data-base-620d3.appspot.com",
      messagingSenderId: "765561070786",
      appId: "1:765561070786:web:f4e1e44c9284ea6ff8075b",
      measurementId: "G-4NTXWDK5G0"
    };

    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);
    const db = getFirestore(app);

    const map = L.map('map', { crs: L.CRS.Simple, minZoom: -2 });
    const bounds = [[0,0], [1040,1040]];
    L.imageOverlay('image.png', bounds).addTo(map);
    map.fitBounds(bounds);

    const columns = 28;
    const rows = 28;
    const cellWidth = 1040 / columns;
    const cellHeight = 1040 / rows;

    for (let i = 0; i <= columns; i++) {
      let x = i * cellWidth;
      L.polyline([[0, x], [1040, x]], { color: 'rgba(0,0,0,0.3)', weight: 1 }).addTo(map);
    }
    for (let j = 0; j <= rows; j++) {
      let y = j * cellHeight;
      L.polyline([[y, 0], [y, 1040]], { color: 'rgba(0,0,0,0.3)', weight: 1 }).addTo(map);
    }

    // Marker data (e.g., icons)
    const fishIcon = L.divIcon({ className: 'fish-marker', html: '<div style="color:red;font-size:12px;font-weight:bold;">X</div>', iconSize: [12, 12], iconAnchor: [6, 6] });
    const questIcon = L.divIcon({ className: 'quest-marker', html: '<div style="color:gold;font-size:24px;font-weight:bold;">!</div>', iconSize: [24, 24], iconAnchor: [12, 12] });

    // Marker groups to store markers of each type
    const markerGroups = { fish: [], quest: [] };
    const markers = [];

    // Fetch markers from Firestore and display on map
    (async () => {
      const q = query(collection(db, 'markers'), orderBy('ts'));
      const snapshot = await getDocs(q);
      snapshot.forEach(docSnap => {
        const data = docSnap.data();
        const { lat, lng, label, iconType } = data;
        let icon;
        if (iconType === 'fish') icon = fishIcon;
        else if (iconType === 'quest') icon = questIcon;

        const marker = L.marker([lat, lng], icon ? { icon } : {}).bindPopup(label);
        if (iconType && markerGroups[iconType]) markerGroups[iconType].push(marker);
        marker.addTo(map);
        marker.on('contextmenu', async () => {
          if (confirm('Delete this marker?')) {
            if (checkPassword()) {
              await deleteDoc(doc(db, 'markers', docSnap.id));
              map.removeLayer(marker);
            }
          }
        });
        markers.push(marker);
      });
    })();

    // Function to check password
    function checkPassword() {
      const password = prompt("Enter the password to add/delete markers:");
      return password === 'Pumpitup';
    }

    // Add a new marker when map is clicked
    map.on('click', async function(e) {
      if (checkPassword()) {
        const input = prompt("Enter label, 'fish', 'quest', or image URL:");
        if (!input) return;

        let iconType = null;
        let icon = null;
        let label = input;

        if (input.toLowerCase() === 'fish') { 
          iconType = 'fish'; 
          icon = fishIcon; 
          label = 'Fishing Spot'; 
        } else if (input.toLowerCase() === 'quest') { 
          iconType = 'quest'; 
          icon = questIcon; 
          label = prompt("Enter quest label:", "Quest!") || "Quest!"; 
        }

        try {
          const docRef = await addDoc(collection(db, 'markers'), {
            lat: e.latlng.lat,
            lng: e.latlng.lng,
            label,
            iconType,
            ts: serverTimestamp()
          });
          const marker = L.marker([e.latlng.lat, e.latlng.lng], icon ? { icon } : {}).addTo(map).bindPopup(label);
          marker.on('contextmenu', async () => {
            if (confirm('Delete this marker?')) {
              if (checkPassword()) {
                await deleteDoc(doc(db, 'markers', docRef.id));
                map.removeLayer(marker);
              }
            }
          });
          markers.push(marker);
        } catch (err) {
          console.error('Error saving marker:', err);
          alert('Failed to save marker. Try again.');
        }
      } else {
        alert('Incorrect password.');
      }
    });

    function resetZoom() {
      map.fitBounds(bounds);
    }
  </script>
</body>
</html>
